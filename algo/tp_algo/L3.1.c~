#include <stdlib.h>
# include <string.h>
# include <stdio.h>

struct Element
{
int Numero ;
struct Element *suivant ;
};
typedef struct Element *liste ;
l=(liste) malloc(sizeof(struct Element)) ;
l-> ….
/* fonction qui verifie si un nombre est dans la liste*/
int appartient_liste(liste t, int val)
{
liste temp=l ;
while((temp!=NULL)&&(temp->Numero!=val))
	{temp=temp->suivant ;
	if (temp!=NULL) return 0 ;
	else return 1 ;
	}
}
/* idem en recursif*/
int appartient (Liste l, int val)
{
if(l==NULL) return0 ;
else 	if
	(l->Numero==val) return 1 ;
	else return appartient(l->suivant, val) ;
}
/*sous programmme test*/
int main()
{
Liste P ;
l=malloc(sizeof(struct Element)) ;
l->Numero=24100 ;
l->suivant=NULL ;
printf(« appartient_liste (l,24100)=%d \n »),appartient(l,24100)) ;
Free (l) ;
}

/* procedure qui supprime un element d'une liste.*/
Void supprimer(liste *l, int val)
{
liste temp= *l ;
liste sup ;
if (l->Numero==val)
	{	
	sup= *l ;
	l = (*l)->suivant ;
	}
else
	{
	while((temp->suivant != NULL)&&((temp->suivant ->Numero != val)
		{
		sup=temp->suivant ;
		temp->suivant=temp-> -> suivant;
		}
	}
Free(sup) ;
}


